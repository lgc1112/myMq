// Code generated by protoc-gen-go.
// source: response.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResponseType int32

const (
	ResponseType_Success         ResponseType = 0
	ResponseType_Error           ResponseType = 1
	ResponseType_TopicExisted    ResponseType = 2
	ResponseType_TopicNotExisted ResponseType = 3
)

var ResponseType_name = map[int32]string{
	0: "Success",
	1: "Error",
	2: "TopicExisted",
	3: "TopicNotExisted",
}
var ResponseType_value = map[string]int32{
	"Success":         0,
	"Error":           1,
	"TopicExisted":    2,
	"TopicNotExisted": 3,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}
func (ResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Response struct {
	ResponseType ResponseType `protobuf:"varint,1,opt,name=ResponseType,enum=protocol.ResponseType" json:"ResponseType,omitempty"`
	Msg          *Message     `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
	Partitions   []*Partition `protobuf:"bytes,2,rep,name=Partitions" json:"Partitions,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Response) GetResponseType() ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return ResponseType_Success
}

func (m *Response) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Response) GetPartitions() []*Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

type Partition struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Partition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Partition) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "protocol.Response")
	proto.RegisterType((*Partition)(nil), "protocol.Partition")
	proto.RegisterEnum("protocol.ResponseType", ResponseType_name, ResponseType_value)
}

func init() { proto.RegisterFile("response.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0x5d, 0xf0, 0x4f, 0x19, 0x6a, 0xc5, 0x69, 0x62, 0x88, 0x27, 0x52, 0x2f, 0xc4, 0x03,
	0x07, 0xb8, 0x79, 0xef, 0xb1, 0xc6, 0xac, 0x7d, 0x01, 0x84, 0x49, 0x43, 0x62, 0x59, 0x9c, 0xd9,
	0x26, 0xfa, 0x36, 0x3e, 0xaa, 0x61, 0x91, 0xb6, 0x9c, 0xf6, 0xdb, 0xef, 0xf7, 0x9b, 0x64, 0x06,
	0x16, 0x4c, 0xd2, 0x99, 0x56, 0x28, 0xeb, 0xd8, 0x58, 0x83, 0x33, 0xf7, 0x54, 0xe6, 0xf3, 0xf1,
	0x96, 0xe9, 0xeb, 0x40, 0x62, 0x07, 0xb0, 0xfa, 0x55, 0x30, 0xd3, 0xff, 0x2e, 0xbe, 0xc0, 0x7c,
	0xcc, 0xdb, 0x9f, 0x8e, 0x62, 0x95, 0xa8, 0x74, 0x91, 0x3f, 0x64, 0xe3, 0x70, 0x76, 0x4e, 0xf5,
	0xc4, 0xc5, 0x27, 0xf0, 0xf7, 0xb2, 0x8b, 0xfd, 0x44, 0xa5, 0x61, 0x7e, 0x7f, 0x1a, 0xd9, 0x90,
	0x48, 0xb9, 0x23, 0xdd, 0x53, 0x2c, 0x00, 0xde, 0x4a, 0xb6, 0x8d, 0x6d, 0x4c, 0x2b, 0xb1, 0x97,
	0xf8, 0x69, 0x98, 0x2f, 0x4f, 0xee, 0x91, 0xe9, 0x33, 0x6d, 0x55, 0x40, 0x70, 0xfc, 0x21, 0xc2,
	0x65, 0x5b, 0xee, 0x87, 0xd5, 0x02, 0xed, 0x72, 0xdf, 0x95, 0x75, 0xcd, 0xb1, 0x37, 0x74, 0x7d,
	0x7e, 0xde, 0x4c, 0x4f, 0xc1, 0x10, 0x6e, 0xde, 0x0f, 0x55, 0x45, 0x22, 0xd1, 0x05, 0x06, 0x70,
	0xb5, 0x66, 0x36, 0x1c, 0x29, 0x8c, 0x60, 0xbe, 0x35, 0x5d, 0x53, 0xad, 0xbf, 0x1b, 0xb1, 0x54,
	0x47, 0x1e, 0x2e, 0xe1, 0xce, 0x35, 0xaf, 0xc6, 0x8e, 0xa5, 0xff, 0x71, 0xed, 0x76, 0x2c, 0xfe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x73, 0x3f, 0x4c, 0x58, 0x01, 0x00, 0x00,
}
