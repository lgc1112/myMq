// Code generated by protoc-gen-go.
// source: client2Server.proto
// DO NOT EDIT!

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Client2ServerKey int32

const (
	Client2ServerKey_CreatTopic            Client2ServerKey = 0
	Client2ServerKey_GetPublisherPartition Client2ServerKey = 1
	Client2ServerKey_Publish               Client2ServerKey = 2
	Client2ServerKey_GetConsumerPartition  Client2ServerKey = 3
	Client2ServerKey_SubscribePartion      Client2ServerKey = 4
	Client2ServerKey_SubscribeTopic        Client2ServerKey = 5
	Client2ServerKey_RegisterConsumer      Client2ServerKey = 6
	Client2ServerKey_UnRegisterConsumer    Client2ServerKey = 7
	Client2ServerKey_ConsumeSuccess        Client2ServerKey = 8
	Client2ServerKey_CommitReadyNum        Client2ServerKey = 9
)

var Client2ServerKey_name = map[int32]string{
	0: "CreatTopic",
	1: "GetPublisherPartition",
	2: "Publish",
	3: "GetConsumerPartition",
	4: "SubscribePartion",
	5: "SubscribeTopic",
	6: "RegisterConsumer",
	7: "UnRegisterConsumer",
	8: "ConsumeSuccess",
	9: "CommitReadyNum",
}
var Client2ServerKey_value = map[string]int32{
	"CreatTopic":            0,
	"GetPublisherPartition": 1,
	"Publish":               2,
	"GetConsumerPartition":  3,
	"SubscribePartion":      4,
	"SubscribeTopic":        5,
	"RegisterConsumer":      6,
	"UnRegisterConsumer":    7,
	"ConsumeSuccess":        8,
	"CommitReadyNum":        9,
}

func (x Client2ServerKey) String() string {
	return proto.EnumName(Client2ServerKey_name, int32(x))
}
func (Client2ServerKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CreatTopicResponse_ResponseKey int32

const (
	CreatTopicResponse_TopicExisted CreatTopicResponse_ResponseKey = 0
	CreatTopicResponse_Success      CreatTopicResponse_ResponseKey = 1
	CreatTopicResponse_Error        CreatTopicResponse_ResponseKey = 2
)

var CreatTopicResponse_ResponseKey_name = map[int32]string{
	0: "TopicExisted",
	1: "Success",
	2: "Error",
}
var CreatTopicResponse_ResponseKey_value = map[string]int32{
	"TopicExisted": 0,
	"Success":      1,
	"Error":        2,
}

func (x CreatTopicResponse_ResponseKey) String() string {
	return proto.EnumName(CreatTopicResponse_ResponseKey_name, int32(x))
}
func (CreatTopicResponse_ResponseKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

type GetPublisherPartitionsResponse_ResponseKey int32

const (
	GetPublisherPartitionsResponse_TopicNotExisted  GetPublisherPartitionsResponse_ResponseKey = 0
	GetPublisherPartitionsResponse_Success          GetPublisherPartitionsResponse_ResponseKey = 1
	GetPublisherPartitionsResponse_Error            GetPublisherPartitionsResponse_ResponseKey = 2
	GetPublisherPartitionsResponse_ReturnPartitions GetPublisherPartitionsResponse_ResponseKey = 3
)

var GetPublisherPartitionsResponse_ResponseKey_name = map[int32]string{
	0: "TopicNotExisted",
	1: "Success",
	2: "Error",
	3: "ReturnPartitions",
}
var GetPublisherPartitionsResponse_ResponseKey_value = map[string]int32{
	"TopicNotExisted":  0,
	"Success":          1,
	"Error":            2,
	"ReturnPartitions": 3,
}

func (x GetPublisherPartitionsResponse_ResponseKey) String() string {
	return proto.EnumName(GetPublisherPartitionsResponse_ResponseKey_name, int32(x))
}
func (GetPublisherPartitionsResponse_ResponseKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{4, 0}
}

// this is a comment
type Client2Server struct {
	Key          Client2ServerKey `protobuf:"varint,1,opt,name=key,enum=protocol.Client2ServerKey" json:"key,omitempty"`
	Topic        string           `protobuf:"bytes,2,opt,name=Topic" json:"Topic,omitempty"`
	Partition    string           `protobuf:"bytes,3,opt,name=Partition" json:"Partition,omitempty"`
	GroupName    string           `protobuf:"bytes,4,opt,name=GroupName" json:"GroupName,omitempty"`
	PartitionNum int32            `protobuf:"varint,5,opt,name=PartitionNum" json:"PartitionNum,omitempty"`
	MsgId        int32            `protobuf:"varint,6,opt,name=MsgId" json:"MsgId,omitempty"`
	ReadyNum     int32            `protobuf:"varint,7,opt,name=ReadyNum" json:"ReadyNum,omitempty"`
	Msg          *Message         `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`
	RebalanceId  int32            `protobuf:"varint,9,opt,name=RebalanceId" json:"RebalanceId,omitempty"`
}

func (m *Client2Server) Reset()                    { *m = Client2Server{} }
func (m *Client2Server) String() string            { return proto.CompactTextString(m) }
func (*Client2Server) ProtoMessage()               {}
func (*Client2Server) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Client2Server) GetKey() Client2ServerKey {
	if m != nil {
		return m.Key
	}
	return Client2ServerKey_CreatTopic
}

func (m *Client2Server) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Client2Server) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *Client2Server) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Client2Server) GetPartitionNum() int32 {
	if m != nil {
		return m.PartitionNum
	}
	return 0
}

func (m *Client2Server) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Client2Server) GetReadyNum() int32 {
	if m != nil {
		return m.ReadyNum
	}
	return 0
}

func (m *Client2Server) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Client2Server) GetRebalanceId() int32 {
	if m != nil {
		return m.RebalanceId
	}
	return 0
}

type CreatTopicRequest struct {
	Topic        string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	PartitionNum int32  `protobuf:"varint,2,opt,name=PartitionNum" json:"PartitionNum,omitempty"`
}

func (m *CreatTopicRequest) Reset()                    { *m = CreatTopicRequest{} }
func (m *CreatTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatTopicRequest) ProtoMessage()               {}
func (*CreatTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreatTopicRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *CreatTopicRequest) GetPartitionNum() int32 {
	if m != nil {
		return m.PartitionNum
	}
	return 0
}

type CreatTopicResponse struct {
	Key CreatTopicResponse_ResponseKey `protobuf:"varint,1,opt,name=key,enum=protocol.CreatTopicResponse_ResponseKey" json:"key,omitempty"`
}

func (m *CreatTopicResponse) Reset()                    { *m = CreatTopicResponse{} }
func (m *CreatTopicResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatTopicResponse) ProtoMessage()               {}
func (*CreatTopicResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreatTopicResponse) GetKey() CreatTopicResponse_ResponseKey {
	if m != nil {
		return m.Key
	}
	return CreatTopicResponse_TopicExisted
}

type GetPublisherPartitionsRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
}

func (m *GetPublisherPartitionsRequest) Reset()                    { *m = GetPublisherPartitionsRequest{} }
func (m *GetPublisherPartitionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublisherPartitionsRequest) ProtoMessage()               {}
func (*GetPublisherPartitionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetPublisherPartitionsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type GetPublisherPartitionsResponse struct {
	Key        GetPublisherPartitionsResponse_ResponseKey `protobuf:"varint,1,opt,name=key,enum=protocol.GetPublisherPartitionsResponse_ResponseKey" json:"key,omitempty"`
	Partitions []*Partition                               `protobuf:"bytes,2,rep,name=Partitions" json:"Partitions,omitempty"`
}

func (m *GetPublisherPartitionsResponse) Reset()                    { *m = GetPublisherPartitionsResponse{} }
func (m *GetPublisherPartitionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPublisherPartitionsResponse) ProtoMessage()               {}
func (*GetPublisherPartitionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetPublisherPartitionsResponse) GetKey() GetPublisherPartitionsResponse_ResponseKey {
	if m != nil {
		return m.Key
	}
	return GetPublisherPartitionsResponse_TopicNotExisted
}

func (m *GetPublisherPartitionsResponse) GetPartitions() []*Partition {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func init() {
	proto.RegisterType((*Client2Server)(nil), "protocol.Client2Server")
	proto.RegisterType((*CreatTopicRequest)(nil), "protocol.CreatTopicRequest")
	proto.RegisterType((*CreatTopicResponse)(nil), "protocol.CreatTopicResponse")
	proto.RegisterType((*GetPublisherPartitionsRequest)(nil), "protocol.GetPublisherPartitionsRequest")
	proto.RegisterType((*GetPublisherPartitionsResponse)(nil), "protocol.GetPublisherPartitionsResponse")
	proto.RegisterEnum("protocol.Client2ServerKey", Client2ServerKey_name, Client2ServerKey_value)
	proto.RegisterEnum("protocol.CreatTopicResponse_ResponseKey", CreatTopicResponse_ResponseKey_name, CreatTopicResponse_ResponseKey_value)
	proto.RegisterEnum("protocol.GetPublisherPartitionsResponse_ResponseKey", GetPublisherPartitionsResponse_ResponseKey_name, GetPublisherPartitionsResponse_ResponseKey_value)
}

func init() { proto.RegisterFile("client2Server.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0xda, 0xcd, 0x6d, 0xd2, 0x86, 0xed, 0x24, 0x20, 0x13, 0x01, 0xb2, 0xcc, 0x8b, 0x85,
	0x50, 0x1e, 0x52, 0x10, 0x12, 0xaf, 0x51, 0x89, 0x2a, 0x94, 0x28, 0x72, 0xe0, 0x03, 0x1c, 0x67,
	0x14, 0x2c, 0x62, 0x6f, 0xd8, 0x5d, 0x23, 0xf2, 0x09, 0xfc, 0x0b, 0x9f, 0xc5, 0x3b, 0xbf, 0x80,
	0x6c, 0xc7, 0x97, 0x34, 0xd0, 0x3e, 0xd9, 0x73, 0xce, 0x99, 0xcb, 0x99, 0xd1, 0x42, 0x3f, 0xd8,
	0x86, 0x14, 0xeb, 0xf1, 0x92, 0xe4, 0x77, 0x92, 0xa3, 0x9d, 0x14, 0x5a, 0x60, 0x3b, 0xfb, 0x04,
	0x62, 0x3b, 0xbc, 0x8c, 0x48, 0x29, 0x7f, 0x43, 0x39, 0xe1, 0xfc, 0x32, 0xe0, 0x72, 0x52, 0x4f,
	0xc0, 0xd7, 0x60, 0x7e, 0xa5, 0xbd, 0xc5, 0x6c, 0xe6, 0xf6, 0xc6, 0xc3, 0x51, 0x91, 0x38, 0x3a,
	0x52, 0x7d, 0xa4, 0xbd, 0x97, 0xca, 0x70, 0x00, 0x8d, 0x4f, 0x62, 0x17, 0x06, 0x96, 0x61, 0x33,
	0xb7, 0xe3, 0xe5, 0x01, 0x3e, 0x83, 0xce, 0xc2, 0x97, 0x3a, 0xd4, 0xa1, 0x88, 0x2d, 0x33, 0x63,
	0x2a, 0x20, 0x65, 0xa7, 0x52, 0x24, 0xbb, 0xb9, 0x1f, 0x91, 0x75, 0x9e, 0xb3, 0x25, 0x80, 0x0e,
	0x5c, 0x94, 0xd2, 0x79, 0x12, 0x59, 0x0d, 0x9b, 0xb9, 0x0d, 0xef, 0x08, 0x4b, 0xbb, 0xce, 0xd4,
	0xe6, 0x76, 0x6d, 0x35, 0x33, 0x32, 0x0f, 0x70, 0x08, 0x6d, 0x8f, 0xfc, 0xf5, 0x3e, 0xcd, 0x6a,
	0x65, 0x44, 0x19, 0xe3, 0x4b, 0x30, 0x23, 0xb5, 0xb1, 0xda, 0x36, 0x73, 0xbb, 0xe3, 0xab, 0xca,
	0xd5, 0x2c, 0xdf, 0x86, 0x97, 0xb2, 0x68, 0x43, 0xd7, 0xa3, 0x95, 0xbf, 0xf5, 0xe3, 0x80, 0x6e,
	0xd7, 0x56, 0x27, 0xab, 0x51, 0x87, 0x9c, 0x19, 0x5c, 0x4d, 0x24, 0xf9, 0x3a, 0xb3, 0xe9, 0xd1,
	0xb7, 0x84, 0x94, 0xae, 0x76, 0xc0, 0xea, 0x3b, 0xb8, 0xeb, 0xc3, 0x38, 0xf5, 0xe1, 0xfc, 0x64,
	0x80, 0xf5, 0x7a, 0x6a, 0x27, 0x62, 0x45, 0xf8, 0xbe, 0x7e, 0x02, 0xb7, 0x76, 0x82, 0x13, 0xe9,
	0xa8, 0xf8, 0x29, 0x0e, 0xe2, 0xbc, 0x4b, 0x3d, 0x94, 0x18, 0x72, 0xb8, 0xc8, 0x12, 0x6e, 0x7e,
	0x84, 0x4a, 0xd3, 0x9a, 0x9f, 0x61, 0x17, 0x5a, 0xcb, 0x24, 0x08, 0x48, 0x29, 0xce, 0xb0, 0x03,
	0x8d, 0x1b, 0x29, 0x85, 0xe4, 0x86, 0xf3, 0x16, 0x9e, 0x4f, 0x49, 0x2f, 0x92, 0xd5, 0x36, 0x54,
	0x5f, 0x48, 0x96, 0x73, 0xaa, 0x7b, 0x6d, 0x3a, 0x7f, 0x18, 0xbc, 0xf8, 0x5f, 0xde, 0xc1, 0xce,
	0x87, 0xba, 0x9d, 0x37, 0x95, 0x9d, 0xfb, 0xd3, 0x4e, 0xac, 0xe1, 0x35, 0x40, 0x25, 0xb3, 0x0c,
	0xdb, 0x74, 0xbb, 0xe3, 0x7e, 0x55, 0xae, 0xe4, 0xbc, 0x9a, 0xcc, 0x59, 0x1c, 0xef, 0xa3, 0x0f,
	0x8f, 0xb2, 0xb9, 0xe7, 0x42, 0x3f, 0xb8, 0x12, 0x1c, 0x00, 0xf7, 0x48, 0x27, 0x32, 0xae, 0xea,
	0x71, 0xf3, 0xd5, 0x6f, 0x06, 0xfc, 0xee, 0x63, 0xc0, 0x1e, 0x40, 0x75, 0x1d, 0x7e, 0x86, 0x4f,
	0xe1, 0xf1, 0x3f, 0xed, 0x71, 0x96, 0x76, 0x3b, 0xe0, 0xdc, 0x40, 0x0b, 0x06, 0x53, 0xd2, 0x13,
	0x11, 0xab, 0x24, 0xaa, 0xcb, 0xcc, 0xb4, 0xf9, 0x32, 0x59, 0xa9, 0x40, 0x86, 0x2b, 0xca, 0x70,
	0x11, 0xf3, 0x73, 0x44, 0xe8, 0x95, 0x68, 0xde, 0xab, 0x91, 0x8f, 0xb9, 0x49, 0xcd, 0xc8, 0xa2,
	0x10, 0x6f, 0xe2, 0x13, 0xc0, 0xcf, 0xf1, 0x09, 0xde, 0x4a, 0x2b, 0x1c, 0xa2, 0xc2, 0x73, 0x3b,
	0xc7, 0xa2, 0x28, 0xd4, 0xc5, 0x7b, 0xe1, 0x9d, 0x55, 0x33, 0x5b, 0xec, 0xf5, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x02, 0x75, 0x32, 0xc5, 0x50, 0x04, 0x00, 0x00,
}
